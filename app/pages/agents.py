"""
Gerenciamento de Agentes - Cria√ß√£o e Configura√ß√£o de Agentes Inteligentes
"""

import streamlit as st

def show_agents_tab():
    """Exibe a aba de gerenciamento de agentes."""
    st.header("ü§ñ Gerenciamento de Agentes")
    st.markdown("### Crie, configure e gerencie seus agentes inteligentes")
    
    with st.expander("‚ÑπÔ∏è Sobre Agentes Inteligentes", expanded=False):
        st.info("""
        **O que s√£o agentes?**
        Agentes s√£o entidades inteligentes que executam tarefas espec√≠ficas usando IA, equipados com ferramentas e um contexto (hist√≥ria) para orientar suas a√ß√µes.

        **Como funcionam:**
        1. **Fun√ß√£o (Role)**: Define a especialidade do agente (ex: "Analista de Dados").
        2. **Objetivo (Goal)**: Descreve a meta principal que o agente deve alcan√ßar.
        3. **Hist√≥ria (Backstory)**: Fornece o contexto e a personalidade do agente.
        4. **Ferramentas (Tools)**: Habilidades espec√≠ficas que o agente pode usar.
        """)

    st.markdown("---")

    agent_manager = st.session_state.agent_manager
    tools_manager = st.session_state.tools_manager

    # Se√ß√£o de Vis√£o Geral
    st.subheader("üìä Vis√£o Geral")
    try:
        available_agents = agent_manager.list_available_agent_types()
        agents_with_tools = sum(1 for agent_type in available_agents if agent_manager.get_agent_tools(agent_type))
        
        col1, col2 = st.columns(2)
        col1.metric("Total de Agentes", len(available_agents), "N√∫mero total de agentes configurados.")
        col2.metric("Agentes com Ferramentas", agents_with_tools, "Agentes que possuem uma ou mais ferramentas atribu√≠das.")
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel carregar as estat√≠sticas dos agentes: {e}")

    st.markdown("---")

    # Lista de Agentes Dispon√≠veis
    st.subheader("üìã Agentes Dispon√≠veis")
    try:
        if not available_agents:
            st.warning("Nenhum agente encontrado. Verifique o arquivo `app/config/agents.yaml`.")
        else:
            for agent_type in available_agents:
                info = agent_manager.get_agent_info(agent_type) or {}
                
                with st.expander(f"ü§ñ **{info.get('name', agent_type)}** (`{agent_type}`)", expanded=False):
                    st.markdown(f"**Fun√ß√£o**: {info.get('role', '*N√£o definida*')}")
                    st.markdown(f"**Objetivo**: {info.get('goal', '*N√£o definido*')}")
                    st.markdown(f"**Hist√≥ria**: {info.get('backstory', '*N√£o definida*')}")
                    
                    st.markdown("---")
                    
                    # Op√ß√µes e Ferramentas
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown("**Op√ß√µes:**")
                        st.checkbox("Modo Verbose", value=info.get('verbose', False), key=f"verbose_{agent_type}", disabled=True)
                        st.checkbox("Permitir Delega√ß√£o", value=info.get('allow_delegation', False), key=f"delegation_{agent_type}", disabled=True)

                    with col2:
                        st.markdown("**Ferramentas Atribu√≠das:**")
                        agent_tools = agent_manager.get_agent_tools(agent_type)
                        if not agent_tools:
                            st.info("Nenhuma ferramenta atribu√≠da.")
                        else:
                            for tool_name in agent_tools:
                                tool_info = tools_manager.get_tool_info(tool_name)
                                if tool_info:
                                    st.success(f"‚úÖ {tool_info.get('name', tool_name)}")
                                else:
                                    st.error(f"‚ùå {tool_name} (n√£o encontrada)")
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar os detalhes dos agentes: {e}")

    # Informa√ß√µes sobre configura√ß√£o
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Informa√ß√µes sobre Configura√ß√£o")
    
    st.info("Os agentes s√£o configurados no arquivo `app/config/agents.yaml`. Para editar, adicione as altera√ß√µes no arquivo e recarregue a aplica√ß√£o.")
    
    with st.expander("üìÑ Visualizar Configura√ß√£o Atual (`agents.yaml`)"):
        try:
            with open("app/config/agents.yaml", "r", encoding="utf-8") as f:
                st.code(f.read(), language="yaml")
        except Exception as e:
            st.error(f"Erro ao ler arquivo de configura√ß√£o: {e}")

    # Exemplos de agentes
    st.markdown("---")
    st.subheader("üí° Exemplos de Agentes")
    
    examples = [
        {
            "name": "Researcher",
            "role": "Pesquisador",
            "goal": "Encontrar informa√ß√µes precisas e relevantes",
            "backstory": "Especialista em pesquisa com vasta experi√™ncia em an√°lise de dados"
        },
        {
            "name": "Analyst",
            "role": "Analista de Dados",
            "goal": "Analisar dados e gerar insights valiosos",
            "backstory": "Analista experiente com conhecimento em estat√≠stica e visualiza√ß√£o"
        },
        {
            "name": "Writer",
            "role": "Escritor",
            "goal": "Criar conte√∫do claro e bem estruturado",
            "backstory": "Escritor t√©cnico especializado em relat√≥rios e documenta√ß√£o"
        }
    ]
    
    for example in examples:
        with st.expander(f"ü§ñ {example['name']}", expanded=False):
            st.write(f"**Fun√ß√£o:** {example['role']}")
            st.write(f"**Objetivo:** {example['goal']}")
            st.write(f"**Hist√≥ria:** {example['backstory']}") 