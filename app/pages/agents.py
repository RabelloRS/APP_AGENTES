"""
Gerenciamento de Agentes - Cria√ß√£o e Configura√ß√£o de Agentes Inteligentes
"""

import streamlit as st
from pathlib import Path

def show_agent_edit_form(editing_agent, manager):
    """Exibe o formul√°rio de edi√ß√£o de um agente"""
    st.subheader(f"‚úèÔ∏è Editando Agente: {editing_agent}")
    
    # Ajuda para edi√ß√£o
    with st.expander("‚ÑπÔ∏è Como editar um agente", expanded=False):
        st.info("""
        **Campos obrigat√≥rios:**
        - **Nome**: Identificador √∫nico do agente
        - **Fun√ß√£o**: Papel espec√≠fico do agente no sistema
        - **Objetivo**: Meta principal que o agente deve alcan√ßar
        - **Hist√≥ria**: Contexto e personalidade do agente
        
        **Op√ß√µes avan√ßadas:**
        - **Verbose**: Mostra detalhes durante execu√ß√£o
        - **Permitir Delega√ß√£o**: Permite que o agente delegue tarefas
        
        **Importante:** Alterar o nome pode afetar crews existentes!
        """)

    # Obter informa√ß√µes atuais do agente
    current_info = manager.get_agent_info(editing_agent) or {}

    # Formul√°rio de edi√ß√£o
    with st.form(f"edit_agent_{editing_agent}"):
        st.write("**Configura√ß√µes do Agente**")

        # Campos de edi√ß√£o
        new_name = st.text_input(
            "Nome do Agente",
            value=current_info.get("name", ""),
            key=f"name_{editing_agent}",
            help="Nome √∫nico para identificar o agente"
        )
        new_role = st.text_input(
            "Fun√ß√£o",
            value=current_info.get("role", ""),
            key=f"role_{editing_agent}",
            help="Papel espec√≠fico do agente (ex: Analista de Dados, Pesquisador)"
        )
        new_goal = st.text_area(
            "Objetivo",
            value=current_info.get("goal", ""),
            key=f"goal_{editing_agent}",
            help="Meta principal que o agente deve alcan√ßar"
        )
        new_backstory = st.text_area(
            "Hist√≥ria",
            value=current_info.get("backstory", ""),
            key=f"backstory_{editing_agent}",
            help="Contexto, experi√™ncia e personalidade do agente"
        )

        # Op√ß√µes avan√ßadas
        with st.expander("‚öôÔ∏è Op√ß√µes Avan√ßadas"):
            new_verbose = st.checkbox(
                "Verbose",
                value=current_info.get("verbose", True),
                key=f"verbose_{editing_agent}",
                help="Mostra detalhes durante a execu√ß√£o das tarefas"
            )
            new_allow_delegation = st.checkbox(
                "Permitir Delega√ß√£o",
                value=current_info.get("allow_delegation", False),
                key=f"delegation_{editing_agent}",
                help="Permite que o agente delegue tarefas para outros agentes"
            )

        # Verificar se o nome foi alterado
        name_changed = new_name != current_info.get("name", "")
        if name_changed:
            st.warning("‚ö†Ô∏è O nome do agente foi alterado!")
            st.info(
                """
            **Importante:** Alterar o nome pode afetar crews e tarefas existentes.
            Recomendamos usar o mesmo nome ou atualizar as crews manualmente.
            """
            )

        col1, col2, col3 = st.columns(3)

        with col1:
            if st.form_submit_button("üíæ Salvar Altera√ß√µes", type="primary"):
                # Validar campos obrigat√≥rios
                if not new_name or not new_role or not new_goal or not new_backstory:
                    st.error("Todos os campos s√£o obrigat√≥rios!")
                else:
                    # Preparar nova configura√ß√£o
                    new_config = {
                        "name": new_name,
                        "role": new_role,
                        "goal": new_goal,
                        "backstory": new_backstory,
                        "verbose": new_verbose,
                        "allow_delegation": new_allow_delegation,
                        "tools": current_info.get("tools", []),
                    }

                    # Salvar altera√ß√µes
                    if manager.update_agent_config(editing_agent, new_config):
                        st.success(f"Agente '{new_name}' atualizado com sucesso!")

                        # Se o nome foi alterado, mostrar aviso sobre crews
                        if name_changed:
                            st.warning(
                                """
                            **Aten√ß√£o:** O nome do agente foi alterado.
                            Verifique se as crews existentes ainda funcionam corretamente.
                            """
                            )

                        # Limpar estado de edi√ß√£o
                        st.session_state.editing_agent = None
                        st.rerun()
                    else:
                        st.error("Erro ao salvar altera√ß√µes!")

        with col2:
            if st.form_submit_button("‚ùå Cancelar"):
                st.session_state.editing_agent = None
                st.rerun()

        with col3:
            if st.form_submit_button("üîÑ Recarregar Original"):
                st.rerun()


def show_agent_entry(agent_type, info, editing_agent, manager, tools_manager):
    """Exibe uma entrada de agente na lista"""
    name = info.get("name", agent_type)
    role = info.get("role", "-")
    goal = info.get("goal", "-")
    agent_tools = manager.get_agent_tools(agent_type)

    with st.expander(f"ü§ñ {name} ({agent_type})", expanded=False):
        st.write(f"**Fun√ß√£o:** {role}")
        st.write(f"**Objetivo:** {goal}")

        # Mostrar hist√≥ria completa se n√£o estiver editando
        if not editing_agent:
            st.write(f"**Hist√≥ria:** {info.get('backstory', '-')}")

            # Mostrar tools atribu√≠das
            if agent_tools:
                st.write("**üîß Tools Atribu√≠das:**")
                for tool_name in agent_tools:
                    tool_info = tools_manager.get_tool_info(tool_name)
                    if tool_info:
                        st.write(f"  - {tool_info['name']} ({tool_info['category']})")
                    else:
                        st.write(f"  - ‚ö†Ô∏è {tool_name} (n√£o encontrada)")
            else:
                st.write("**üîß Tools Atribu√≠das:** Nenhuma")

        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button(f"‚úèÔ∏è Editar {name}", key=f"edit_{agent_type}"):
                st.session_state.editing_agent = agent_type
                st.rerun()

        with col2:
            if st.button(f"üîÑ Recriar {name}", key=f"recreate_{agent_type}"):
                # Remover agente existente se houver
                if agent_type in manager.agents:
                    del manager.agents[agent_type]

                # Criar novo agente
                agent = manager.create_agent(agent_type)
                if agent:
                    st.success(f"Agente {name} recriado com sucesso!")
                else:
                    st.error(f"Erro ao recriar agente {name}")

        with col3:
            if st.button(f"üß™ Testar {name}", key=f"test_{agent_type}"):
                st.info(f"Teste do agente {name} em desenvolvimento")
                st.write("Funcionalidade de teste ser√° implementada em breve.")


def show_agents_tab():
    """Exibe a aba de gerenciamento de agentes"""
    st.header("ü§ñ Gerenciamento de Agentes")
    st.markdown("### Crie, configure e gerencie seus agentes inteligentes")
    
    # Ajuda geral
    with st.expander("‚ÑπÔ∏è Sobre Agentes Inteligentes", expanded=False):
        st.info("""
        **O que s√£o agentes?**
        Agentes s√£o entidades inteligentes que executam tarefas espec√≠ficas usando IA.
        
        **Tipos de agentes dispon√≠veis:**
        - **Researcher**: Pesquisa informa√ß√µes e dados
        - **Analyst**: Analisa dados e gera insights
        - **Writer**: Cria conte√∫do e relat√≥rios
        - **Reviewer**: Revisa e valida resultados
        - **Excel Analyst**: Especializado em an√°lise de planilhas
        
        **Como usar:**
        1. **Editar**: Modifique configura√ß√µes dos agentes
        2. **Recriar**: Aplique mudan√ßas a agentes existentes
        3. **Testar**: Verifique se o agente funciona corretamente
        4. **Configurar Tools**: Atribua ferramentas espec√≠ficas
        """)

    # Lista de agentes dispon√≠veis dinamicamente
    manager = st.session_state.agent_manager

    # Verificar se h√° um agente sendo editado
    editing_agent = st.session_state.get("editing_agent", None)

    if editing_agent:
        show_agent_edit_form(editing_agent, manager)
        st.markdown("---")

    # Lista de agentes
    st.subheader("üìã Agentes Dispon√≠veis")

    tools_manager = st.session_state.tools_manager
    for agent_type in manager.list_available_agent_types():
        info = manager.get_agent_info(agent_type) or {}
        show_agent_entry(agent_type, info, editing_agent, manager, tools_manager)

    # Se√ß√£o de informa√ß√µes
    if not editing_agent:
        st.markdown("---")
        st.subheader("‚ÑπÔ∏è Informa√ß√µes")
        st.info(
            """
        **Como usar:**
        - Clique em **Editar** para modificar as configura√ß√µes de um agente
        - As altera√ß√µes s√£o salvas automaticamente no arquivo de configura√ß√£o
        - Use **Recriar** para aplicar as mudan√ßas a agentes j√° criados
        - O arquivo original √© sempre salvo como backup antes das altera√ß√µes
        """
        )

        # Visualizar configura√ß√£o atual
        with st.expander("üìÑ Visualizar Configura√ß√£o Atual"):
            try:
                with open("app/config/agents.yaml", "r", encoding="utf-8") as f:
                    current_config = f.read()
                st.code(current_config, language="yaml")

                # Verificar se existe backup
                backup_path = "app/config/agents.yaml.backup"
                if Path(backup_path).exists():
                    st.info("‚úÖ Backup do arquivo original dispon√≠vel")
                    if st.button("üìã Ver Backup"):
                        with open(backup_path, "r", encoding="utf-8") as f:
                            backup_content = f.read()
                        st.code(backup_content, language="yaml")
                else:
                    st.info("‚ÑπÔ∏è Nenhum backup encontrado (primeira edi√ß√£o)")

            except Exception as e:
                st.error(f"Erro ao ler arquivo de configura√ß√£o: {e}")

    # Estat√≠sticas dos agentes
    st.markdown("---")
    st.subheader("üìä Estat√≠sticas dos Agentes")
    
    agent_stats = {
        "Total de Agentes": len(manager.list_available_agent_types()),
        "Agentes com Tools": sum(1 for agent_type in manager.list_available_agent_types() 
                               if manager.get_agent_tools(agent_type)),
        "Agentes Verbose": sum(1 for agent_type in manager.list_available_agent_types() 
                             if manager.get_agent_info(agent_type, {}).get("verbose", False)),
        "Agentes com Delega√ß√£o": sum(1 for agent_type in manager.list_available_agent_types() 
                                   if manager.get_agent_info(agent_type, {}).get("allow_delegation", False))
    }
    
    stats_col1, stats_col2, stats_col3, stats_col4 = st.columns(4)
    
    with stats_col1:
        st.metric("Total", agent_stats["Total de Agentes"])
    
    with stats_col2:
        st.metric("Com Tools", agent_stats["Agentes com Tools"])
    
    with stats_col3:
        st.metric("Verbose", agent_stats["Agentes Verbose"])
    
    with stats_col4:
        st.metric("Com Delega√ß√£o", agent_stats["Agentes com Delega√ß√£o"]) 