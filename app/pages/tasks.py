"""
Gerenciamento de Tarefas - Configura√ß√£o e Visualiza√ß√£o de Tarefas
"""

import streamlit as st
from pathlib import Path

# Dicion√°rio de nomes amig√°veis para tarefas
NOMES_TAREFAS = {
    "research_task": "Pesquisa",
    "analysis_task": "An√°lise de Dados",
    "writing_task": "Reda√ß√£o de Relat√≥rio",
    "review_task": "Revis√£o",
    "coordination_task": "Coordena√ß√£o",
    "excel_analysis_task": "An√°lise de Excel",
    "whatsapp_monitoring_task": "Monitoramento WhatsApp",
    "file_download_task": "Download de Arquivos",
    "file_organization_task": "Organiza√ß√£o de Arquivos"
}

def get_task_category_icon(task_type):
    """Retorna um √≠cone com base no tipo da tarefa."""
    if "research" in task_type:
        return "üîç"
    elif "writing" in task_type:
        return "‚úçÔ∏è"
    elif "review" in task_type:
        return "‚úÖ"
    elif "excel" in task_type:
        return "üìà"
    elif "whatsapp" in task_type or "file" in task_type:
        return "üìÇ"
    return "üìä"

def show_tasks_tab():
    """Exibe a aba de gerenciamento de tarefas."""
    st.header("üìã Gerenciamento de Tarefas")
    st.markdown("### Visualize e configure as tarefas dispon√≠veis no sistema")
    
    # Ajuda geral
    with st.expander("‚ÑπÔ∏è Sobre Tarefas", expanded=False):
        st.info("""
        **O que s√£o tarefas?**
        Tarefas s√£o a√ß√µes espec√≠ficas que os agentes podem executar para alcan√ßar objetivos.

        **Como funcionam:**
        1. Cada tarefa tem um agente respons√°vel.
        2. Tarefas podem ser combinadas em crews (equipes).
        3. As tarefas s√£o executadas sequencialmente.
        4. O resultado de uma tarefa pode alimentar a pr√≥xima.
        """)

    st.markdown("---")

    task_manager = st.session_state.task_manager
    agent_manager = st.session_state.agent_manager
    
    # Estat√≠sticas
    st.subheader("üìä Vis√£o Geral")
    try:
        available_tasks = task_manager.list_available_task_types()
        tasks_with_agents = sum(1 for task_type in available_tasks 
                               if (task_manager.get_task_info(task_type) or {}).get("agent"))
        
        col1, col2 = st.columns(2)
        col1.metric("Total de Tipos de Tarefas", len(available_tasks), help="N√∫mero total de tarefas pr√©-configuradas no sistema.")
        col2.metric("Tarefas com Agente Atribu√≠do", tasks_with_agents, help="Tarefas que j√° possuem um agente padr√£o definido.")
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel carregar as estat√≠sticas das tarefas: {e}")

    st.markdown("---")
    
    # Lista detalhada de tarefas
    st.subheader("üìã Detalhes das Tarefas Dispon√≠veis")
    
    try:
        if not available_tasks:
            st.warning("Nenhuma tarefa encontrada. Verifique o arquivo `app/config/tasks.yaml`.")
        else:
            for task_type in available_tasks:
                info = task_manager.get_task_info(task_type) or {}
                
                nome_amigavel = NOMES_TAREFAS.get(task_type, task_type.replace("_", " ").title())
                icon = get_task_category_icon(task_type)
                
                with st.expander(f"{icon} **{nome_amigavel}** (`{task_type}`)", expanded=False):
                    description = info.get("description", "*Sem descri√ß√£o*")
                    expected_output = info.get("expected_output", "*N√£o especificado*")
                    agent_name = info.get("agent", "Nenhum")

                    st.markdown(f"**Descri√ß√£o**: {description}")
                    st.markdown(f"**Sa√≠da Esperada**: {expected_output}")

                    st.markdown(f"**Agente Respons√°vel Padr√£o**: `{agent_name}`")
                    
                    if agent_name != "Nenhum":
                        agent_info = agent_manager.get_agent_info(agent_name)
                        if agent_info:
                            st.success(f"‚úÖ Agente **{agent_info.get('name', agent_name)}** encontrado e pronto para uso.")
                        else:
                            st.error(f"‚ùå O agente **{agent_name}** n√£o foi encontrado. Verifique a configura√ß√£o.")

                    if "parameters" in info:
                        st.markdown("**Par√¢metros da Tarefa:**")
                        st.json(info["parameters"])
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar os detalhes das tarefas: {e}")

    # Informa√ß√µes sobre configura√ß√£o
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Informa√ß√µes sobre Configura√ß√£o")
    
    st.info("""
    As tarefas s√£o configuradas no arquivo `app/config/tasks.yaml`. 
    Para adicionar ou modificar uma tarefa, edite este arquivo e recarregue a aplica√ß√£o.
    """)
    
    # Visualizar configura√ß√£o atual
    with st.expander("üìÑ Visualizar Configura√ß√£o Atual (`tasks.yaml`)"):
        try:
            with open("app/config/tasks.yaml", "r", encoding="utf-8") as f:
                current_config = f.read()
            st.code(current_config, language="yaml")
        except Exception as e:
            st.error(f"Erro ao ler arquivo de configura√ß√£o: {e}")

    # Exemplos de uso
    st.markdown("---")
    st.subheader("üí° Exemplos de Uso")
    
    examples = [
        {
            "title": "Pesquisa Completa",
            "description": "Pesquisar sobre um t√≥pico e gerar relat√≥rio",
            "tasks": ["research_task", "analysis_task", "writing_task"],
            "agents": ["researcher", "analyst", "writer"]
        },
        {
            "title": "An√°lise de Dados",
            "description": "Analisar dados e gerar insights",
            "tasks": ["analysis_task", "writing_task"],
            "agents": ["analyst", "writer"]
        },
        {
            "title": "An√°lise de Planilhas",
            "description": "Comparar e analisar planilhas Excel",
            "tasks": ["excel_analysis_task"],
            "agents": ["excel_analyst"]
        }
    ]
    
    for example in examples:
        with st.expander(f"üìã {example['title']}", expanded=False):
            st.write(f"**Descri√ß√£o:** {example['description']}")
            st.write("**Tarefas:** " + ", ".join([str(NOMES_TAREFAS.get(t, t)) for t in example['tasks']]))
            st.write(f"**Agentes:** {', '.join(example['agents'])}") 